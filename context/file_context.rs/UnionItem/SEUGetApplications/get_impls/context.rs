trait SEUGetApplications { fn get_impls (& self) -> Vec < ImplItem > ; fn get_traits_impls (& self) -> Vec < ImplItem > ; fn get_applications (& self) -> Vec < String > { let mut applications : Vec < String > = Vec :: new () ; for impl_item in self . get_impls () . iter () { for function_item in impl_item . functions . iter () { applications . extend (function_item . applications . clone ()) ; } } for trait_impl in self . get_traits_impls () . iter () { for function_item in trait_impl . functions . iter () { applications . extend (function_item . applications . clone ()) ; } } applications } } # [derive (Debug , Clone)] pub struct UnionItem { union_name : String , item : Option < ItemUnion > , impls : Vec < ImplItem > , traits : Vec < String > , traits_impls : Vec < ImplItem > , } impl UnionItem { fn new () -> Self { UnionItem { union_name : String :: new () , item : None , impls : Vec :: new () , traits : Vec :: new () , traits_impls : Vec :: new () , } } } impl SEUGetApplications for UnionItem { fn get_impls (& self) -> Vec < ImplItem > { self . impls . clone () } fn get_traits_impls (& self) -> Vec < ImplItem > { self . traits_impls . clone () } }